
CREATE TYPE PERSON AS OBJECT(
    id CHAR(10),
    name VARCHAR2(30),
    phone CHAR(10),
    address VARCHAR2(20)
    MEMBER PROCEDURE updateAccount (name VARCHAR2, phone CHAR, address VARCHAR2)

)
   NOT FINAL NOT INSTANTIABLE;
/


CREATE TYPE EMPLOYEE UNDER PERSON(
    salary NUMBER,
    yearOfExperience INTEGER
    MEMBER PROCEDURE updateExperience(year INTEGER);
    MEMBER PROCEDURE updateSalary(amount NUMBER);
    MEMBER FUNCTION getSalary() RETURN NUMBER;
    MEMBER FUNCTION getExperience() RETURN INTEGER;

)
    NOT FINAL NOT INSTANTIABLE;
/


CREATE TYPE COURSEDEPARTMENT;
CREATE TYPE JOBDEPARTMENT;

CREATE TYPE STAFF UNDER EMPLOYEE(
    position VARCHAR2(10),
    timeFlag CHAR(4), /* PART or FULL */
    department COURSEDEPARTMENT
    MEMBER PROCEDURE makePartTime();
    MEMBER PROCEDURE makeFullTime();
    MEMBER PROCEDURE changePosition(p VARCHAR2);
    MEMBER PROCEDURE removeEmployee(e EMPLOYEE);
    MEMBER FUNCTION getPosition() RETURN VARCHAR2;
    MEMBER PROCEDURE changeDepartment(dept COURSEDEPARTMENT);
);

CREATE TYPE COURSE;
CREATE TYPE COURSE_ARRAY IS TABLE OF COURSE;


CREATE STUDENT UNDER PERSON(
    courses COURSE_ARRAY,
    department COURSEDEPARTMENT,
    startingYear INTEGER,
    degree VARCHAR2(20)
    MEMBER PROCEDURE changeDepartment(dept COURSEDEPARTMENT);
    MEMBER PROCEDURE changeDegree(degree VARCHAR2);
     MEMBER FUNCTION getDepartment() RETURN COURSEDEPARTMENT;
    MEMBER FUNCTION getYear() RETURN INTEGER;
    MEMBER FUNCTION getDegree() RETURN VARCHAR2;
    MEMBER PROCEDURE addCourse(c COURSE);
    MEMBER PROCEDURE removeCourse(c COURSE);
);

CREATE TYPE OTHER UNDER EMPLOYEE(
    workingDays INTEGER,
    jobDept JOBDEPARTMENT
    MEMBER PROCEDURE changeDepartment(dept COURSEDEPARTMENT);
    MEMBER FUNCTION getDepartment() RETURN JOBDEPARTMENT;
    MEMBER PROCEDURE updateWorkingDays(days INTEGER);
    MEMBER FUNCTION getWorkingDays() RETURN INTEGER;

);

TYPE STAFF_ARRAY IS TABLE OF STAFF; /* NESTED TABLES */
TYPE OTHER_ARRAY IS TABLE OF OTHER; /* NESTED TABLES */

CREATE TYPE DEPARTMENT AS OBJECT(
    id CHAR(10)
    name VARCHAR2(30),
    location VARCHAR2(20),
    MEMBER PROCEDURE changeDepartmentName(name VARCHAR2);
    MEMBER PROCEDURE changeLocation(location VARCHAR2);
    MEMBER FUNCTION getName() RETURN VARCHAR2;
    MEMBER FUNCTION getLocation() RETURN VARCHAR2;
)
NOT FINAL NOT INSTANTIABLE;
/

TYPE STUDENT_ARRAY IS TABLE OF STUDENT; /* NESTED TABLES */

CREATE OR REPLACE TYPE COURSEDEPARTMENT UNDER DEPARTMENT(
    courses COURSE_ARRAY,
    staffs STAFF_ARRAY,
    students STUDENT_ARRAY
    MEMBER PROCEDURE addCourse(c COURSE);
    MEMBER PROCEDURE removeCourse(c COURSE);
    MEMBER PROCEDURE addStaff(s STAFF);
    MEMBER PROCEDURE removeStaff(s STAFF);
    MEMBER PROCEDURE addStudent(s STUDENT);
    MEMBER PROCEDURE removeStudent(s STUDENT);
);
CREATE TYPE JOB;
CREATE TYPE JOB_ARRAY IS TABLE OF JOB; /* NESTED TABLES */


CREATE OR REPLACE TYPE JOBDEPARTMENT UNDER DEPARTMENT(
    jobs JOB_ARRAY,
    others OTHER_ARRAY
    MEMBER PROCEDURE addJob(j JOB);
    MEMBER PROCEDURE removeJob(j JOB);
    MEMBER PROCEDURE addOther(o OTHER);
    MEMBER PROCEDURE removeOther(o OTHER);
);

CREATE OR REPLACE COURSE AS OBJECT(
    code CHAR(10),
    name VARCHAR2(30),
    creditHour INTEGER, 
    department COURSEDEPARTMENT
    MEMBER PROCEDURE changeName(name VARCHAR2);
    MEMBER PROCEDURE updateCreditHour(hrs INTEGER);
    MEMBER FUNCTION getName() RETURN VARCHAR2;
    MEMBER FUNCTION getCredit() RETURN INTEGER;
);

CREATE OR REPLACE JOB AS OBJECT(
    id CHAR(10),
    name VARCHAR2(20),
    type VARCHAR2(20)
    MEMBER PROCEDURE updateName(name VARCHAR2);
    MEMBER PROCEDURE updateType(type VARCHAR2);
    MEMBER FUNCTION getName() RETURN VARCHAR2;
    MEMBER FUNCTION getType() RETURN VARCHAR2;
);



